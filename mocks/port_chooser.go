// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/topfreegames/maestro/models (interfaces: PortChooser)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPortChooser is a mock of PortChooser interface
type MockPortChooser struct {
	ctrl     *gomock.Controller
	recorder *MockPortChooserMockRecorder
}

// MockPortChooserMockRecorder is the mock recorder for MockPortChooser
type MockPortChooserMockRecorder struct {
	mock *MockPortChooser
}

// NewMockPortChooser creates a new mock instance
func NewMockPortChooser(ctrl *gomock.Controller) *MockPortChooser {
	mock := &MockPortChooser{ctrl: ctrl}
	mock.recorder = &MockPortChooserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPortChooser) EXPECT() *MockPortChooserMockRecorder {
	return m.recorder
}

// Choose mocks base method
func (m *MockPortChooser) Choose(arg0, arg1, arg2 int) []int {
	ret := m.ctrl.Call(m, "Choose", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int)
	return ret0
}

// Choose indicates an expected call of Choose
func (mr *MockPortChooserMockRecorder) Choose(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Choose", reflect.TypeOf((*MockPortChooser)(nil).Choose), arg0, arg1, arg2)
}
