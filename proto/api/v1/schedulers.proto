syntax = "proto3";

package api.v1;

option java_package = "com.topfreegames.maestro.pkg.api.v1";
option go_package = "github.com/topfreegames/maestro/pkg/api/v1";

import "google/api/annotations.proto";
import "api/v1/messages.proto";

// Service that manages the configuration and perform actions into schedulers.
service SchedulersService {
  // Lists all schedulers.
  rpc ListSchedulers(ListSchedulersRequest) returns (ListSchedulersResponse) {
    option (google.api.http) = {
      get: "/schedulers"
    };
  }

  // Create a scheduler.
  rpc CreateScheduler(CreateSchedulerRequest) returns (CreateSchedulerResponse) {
    option (google.api.http) = {
      post: "/schedulers",
      body: "*"
    };
  }
}

// List scheduler request options.
message ListSchedulersRequest {}

// The list schedulers reponse message.
message ListSchedulersResponse {
  // List of schedulers fetched.
  repeated Scheduler schedulers = 1;
}

// Response for the create scheduler.
message CreateSchedulerResponse {
  // Scheduler that was created.
  Scheduler scheduler = 1;
}

// Scheduler is the struct that defines a maestro scheduler
message CreateSchedulerRequest {
  // Unique identifier for the scheduler.
  string name = 1;
  // Game the new scheduler will be part of.
  string game = 2;
  // ?.
  string version = 3;
  // The game room termination grace period
  int64 termination_grace_period = 4;
  // The container object array defines all the game room container configurations
	repeated Container containers = 5;
  // The port range object describes what is the port range used to allocate game rooms
  PortRange port_range = 6;
  // Runtime game room toleration configuration
  string toleration = 7;
  // Runtime game room affinity configuration
  string affinity = 8;
}

// .
message Container {
  // .
  string name = 1;
  // .
  string image = 2;
  // .
  string image_pull_policy = 3;
  // .
  repeated string command = 4;
  // .
  repeated ContainerEnvironment environment = 5;
  // .
  ContainerResources requests = 6;
  // .
  ContainerResources limits = 7;
  // .
  repeated ContainerPort ports = 8;
}
// .
message ContainerEnvironment {
  // .
  string name = 1;
  // .
  string value = 2;
}

// .
message ContainerResources {
  // .
  string memory = 1;
  // .
  string cpu = 2;
}

// .
message ContainerPort {
  // .
  string name = 1;
  // .
  string protocol = 2;
  // .
  int32 port = 3;
  // .
  int32 host_port = 4;
}

