syntax = "proto3";

package api.v1;

option java_package = "com.topfreegames.maestro.pkg.api.v1";
option go_package = "github.com/topfreegames/maestro/pkg/api/v1";

import "google/api/annotations.proto";
import "api/v1/messages.proto";

// Service that manages the configuration and perform actions into schedulers.
service SchedulersService {
  // Lists all schedulers.
  rpc ListSchedulers(ListSchedulersRequest) returns (ListSchedulersResponse) {
    option (google.api.http) = {
      get: "/schedulers"
    };
  }

  // Get Specific Scheduler by name
  rpc GetScheduler(GetSchedulerRequest) returns (GetSchedulerResponse) {
    option (google.api.http) = {
      get: "/schedulers/{scheduler_name=*}"
    };
  }

  // Create a scheduler.
  rpc CreateScheduler(CreateSchedulerRequest) returns (CreateSchedulerResponse) {
    option (google.api.http) = {
      post: "/schedulers",
      body: "*"
    };
  }

  // Given a amount, add rooms to a scheduler.
  rpc AddRooms(AddRoomsRequest) returns (AddRoomsResponse) {
    option (google.api.http) = {
      post: "/schedulers/{scheduler_name=*}/add-rooms",
      body: "*"
    };
  }

  // Given a amount, remove rooms of a scheduler.
  rpc RemoveRooms(RemoveRoomsRequest) returns (RemoveRoomsResponse) {
    option (google.api.http) = {
      post: "/schedulers/{scheduler_name=*}/remove-rooms",
      body: "*"
    };
  }
}

// List scheduler request options.
message ListSchedulersRequest {}

// The list schedulers reponse message.
message ListSchedulersResponse {
  // List of schedulers fetched.
  repeated Scheduler schedulers = 1;
}

// Response for the create scheduler.
message CreateSchedulerResponse {
  // Scheduler that was created.
  Scheduler scheduler = 1;
}

// Scheduler is the struct that defines a maestro scheduler.
message CreateSchedulerRequest {
  // Unique identifier for the scheduler.
  string name = 1;
  // Game the new scheduler will be part of.
  string game = 2;
  // ?.
  string version = 3;
  // The game room termination grace period.
  int64 termination_grace_period = 4;
  // The container object array defines all the game room container configurations.
  repeated Container containers = 5;
  // The port range object describes what is the port range used to allocate game rooms.
  PortRange port_range = 6;
  // Runtime game room toleration configuration.
  string toleration = 7;
  // Runtime game room affinity configuration.
  string affinity = 8;
  // The max surge of new rooms, used to scale and update
  string max_surge = 9;
}

// Add rooms operation request payload + path parameters.
message AddRoomsRequest {
  // Scheduler name where the rooms will be added.
  string scheduler_name = 1;
  // Amount of rooms to be added.
  int32 amount = 2;
}

// Add rooms operation response payload, empty.
message AddRoomsResponse {
  // Add rooms operation ID, further this id will be used to consult its state.
  string operation_id = 1;
}

// Remove rooms operation request payload + path parameters.
message RemoveRoomsRequest {
  // Scheduler name from which the rooms will be removed.
  string scheduler_name = 1;
  // Amount of rooms to be removed.
  int32 amount = 2;
}

// Remove rooms operation response payload.
message RemoveRoomsResponse {
  // Remove rooms operation ID, further this id can be used to consult its state.
  string operation_id = 1;
}

// Get Scheduler operation request
message GetSchedulerRequest {
  // Scheduler name where the rooms will be added.
  string scheduler_name = 1;
  // Scheduler version to be queried (query param)
  string version = 2;
}

// The list schedulers reponse message.
message GetSchedulerResponse {
  // List of schedulers fetched.
  Scheduler scheduler = 1;
}
