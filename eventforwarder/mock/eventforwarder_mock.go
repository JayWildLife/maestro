// Code generated by MockGen. DO NOT EDIT.
// Source: ./eventforwarder/eventforwarder.go

// Package mock_eventforwarder is a generated GoMock package.
package mock_eventforwarder

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventForwarder is a mock of EventForwarder interface
type MockEventForwarder struct {
	ctrl     *gomock.Controller
	recorder *MockEventForwarderMockRecorder
}

// MockEventForwarderMockRecorder is the mock recorder for MockEventForwarder
type MockEventForwarderMockRecorder struct {
	mock *MockEventForwarder
}

// NewMockEventForwarder creates a new mock instance
func NewMockEventForwarder(ctrl *gomock.Controller) *MockEventForwarder {
	mock := &MockEventForwarder{ctrl: ctrl}
	mock.recorder = &MockEventForwarderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventForwarder) EXPECT() *MockEventForwarderMockRecorder {
	return m.recorder
}

// Forward mocks base method
func (m *MockEventForwarder) Forward(ctx context.Context, event string, infos, fwdMetadata map[string]interface{}) (int32, string, error) {
	ret := m.ctrl.Call(m, "Forward", ctx, event, infos, fwdMetadata)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Forward indicates an expected call of Forward
func (mr *MockEventForwarderMockRecorder) Forward(ctx, event, infos, fwdMetadata interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockEventForwarder)(nil).Forward), ctx, event, infos, fwdMetadata)
}
