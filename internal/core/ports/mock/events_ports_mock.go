// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/ports/events_ports.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	events "github.com/topfreegames/maestro/internal/core/entities/events"
)

// MockEventsService is a mock of EventsService interface.
type MockEventsService struct {
	ctrl     *gomock.Controller
	recorder *MockEventsServiceMockRecorder
}

// MockEventsServiceMockRecorder is the mock recorder for MockEventsService.
type MockEventsServiceMockRecorder struct {
	mock *MockEventsService
}

// NewMockEventsService creates a new mock instance.
func NewMockEventsService(ctrl *gomock.Controller) *MockEventsService {
	mock := &MockEventsService{ctrl: ctrl}
	mock.recorder = &MockEventsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsService) EXPECT() *MockEventsServiceMockRecorder {
	return m.recorder
}

// ProduceEvent mocks base method.
func (m *MockEventsService) ProduceEvent(ctx context.Context, event *events.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceEvent indicates an expected call of ProduceEvent.
func (mr *MockEventsServiceMockRecorder) ProduceEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceEvent", reflect.TypeOf((*MockEventsService)(nil).ProduceEvent), ctx, event)
}
