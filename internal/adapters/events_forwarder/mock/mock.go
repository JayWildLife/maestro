// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/ports/events_forwarder.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	events "github.com/topfreegames/maestro/internal/core/entities/events"
	forwarder "github.com/topfreegames/maestro/internal/core/entities/forwarder"
	game_room "github.com/topfreegames/maestro/internal/core/entities/game_room"
)

// MockEventsForwarder is a mock of EventsForwarder interface.
type MockEventsForwarder struct {
	ctrl     *gomock.Controller
	recorder *MockEventsForwarderMockRecorder
}

// MockEventsForwarderMockRecorder is the mock recorder for MockEventsForwarder.
type MockEventsForwarderMockRecorder struct {
	mock *MockEventsForwarder
}

// NewMockEventsForwarder creates a new mock instance.
func NewMockEventsForwarder(ctrl *gomock.Controller) *MockEventsForwarder {
	mock := &MockEventsForwarder{ctrl: ctrl}
	mock.recorder = &MockEventsForwarderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsForwarder) EXPECT() *MockEventsForwarderMockRecorder {
	return m.recorder
}

// ForwardPlayerEvent mocks base method.
func (m *MockEventsForwarder) ForwardPlayerEvent(ctx context.Context, eventAttributes events.PlayerEventAttributes, forwarder forwarder.Forwarder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardPlayerEvent", ctx, eventAttributes, forwarder)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardPlayerEvent indicates an expected call of ForwardPlayerEvent.
func (mr *MockEventsForwarderMockRecorder) ForwardPlayerEvent(ctx, eventAttributes, forwarder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardPlayerEvent", reflect.TypeOf((*MockEventsForwarder)(nil).ForwardPlayerEvent), ctx, eventAttributes, forwarder)
}

// ForwardPlayerEventObsolete mocks base method.
func (m *MockEventsForwarder) ForwardPlayerEventObsolete(ctx context.Context, gameRoom *game_room.GameRoom, attributes map[string]interface{}, options interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardPlayerEventObsolete", ctx, gameRoom, attributes, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardPlayerEventObsolete indicates an expected call of ForwardPlayerEventObsolete.
func (mr *MockEventsForwarderMockRecorder) ForwardPlayerEventObsolete(ctx, gameRoom, attributes, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardPlayerEventObsolete", reflect.TypeOf((*MockEventsForwarder)(nil).ForwardPlayerEventObsolete), ctx, gameRoom, attributes, options)
}

// ForwardRoomEvent mocks base method.
func (m *MockEventsForwarder) ForwardRoomEvent(ctx context.Context, eventAttributes events.RoomEventAttributes, forwarder forwarder.Forwarder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardRoomEvent", ctx, eventAttributes, forwarder)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardRoomEvent indicates an expected call of ForwardRoomEvent.
func (mr *MockEventsForwarderMockRecorder) ForwardRoomEvent(ctx, eventAttributes, forwarder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardRoomEvent", reflect.TypeOf((*MockEventsForwarder)(nil).ForwardRoomEvent), ctx, eventAttributes, forwarder)
}

// ForwardRoomEventObsolete mocks base method.
func (m *MockEventsForwarder) ForwardRoomEventObsolete(ctx context.Context, gameRoom *game_room.GameRoom, instance *game_room.Instance, attributes map[string]interface{}, options interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardRoomEventObsolete", ctx, gameRoom, instance, attributes, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardRoomEventObsolete indicates an expected call of ForwardRoomEventObsolete.
func (mr *MockEventsForwarderMockRecorder) ForwardRoomEventObsolete(ctx, gameRoom, instance, attributes, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardRoomEventObsolete", reflect.TypeOf((*MockEventsForwarder)(nil).ForwardRoomEventObsolete), ctx, gameRoom, instance, attributes, options)
}

// Name mocks base method.
func (m *MockEventsForwarder) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockEventsForwarderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockEventsForwarder)(nil).Name))
}
