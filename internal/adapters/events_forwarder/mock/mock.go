// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/ports/room_storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	"github.com/topfreegames/maestro/internal/core/entities/game_room"
	"github.com/topfreegames/maestro/internal/core/ports"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventsForwarder is a mock of EventsForwarder interface.
type MockEventsForwarder struct {
	ctrl     *gomock.Controller
	recorder *MockEventsForwarderMockRecorder
}

// MockEventsForwarderMockRecorder is the mock recorder for MockEventsForwarder.
type MockEventsForwarderMockRecorder struct {
	mock *MockEventsForwarder
}

// NewMockEventsForwarder creates a new mock instance.
func NewMockEventsForwarder(ctrl *gomock.Controller) *MockEventsForwarder {
	mock := &MockEventsForwarder{ctrl: ctrl}
	mock.recorder = &MockEventsForwarderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsForwarder) EXPECT() *MockEventsForwarderMockRecorder {
	return m.recorder
}

// ForwardRoomEvent mocks base method.
func (m *MockEventsForwarder) ForwardRoomEvent(ctx context.Context, room *game_room.GameRoom, status string, eventType string, metadata map[string]interface{}) (res *ports.EventsForwarderResponse, err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardRoomEvent", ctx, room, status, eventType, metadata)
	ret0, _ := ret[0].(*ports.EventsForwarderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForwardRoomEvent indicates an expected call of ForwardRoomEvent.
func (mr *MockEventsForwarderMockRecorder) ForwardRoomEvent(ctx, room, status, eventType, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardRoomEvent", reflect.TypeOf((*MockEventsForwarder)(nil).ForwardRoomEvent), ctx, room, status, eventType, metadata)
}
