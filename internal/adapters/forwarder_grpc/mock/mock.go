// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/ports/forwarder_grpc.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	eventforwarder "github.com/topfreegames/protos/maestro/grpc/generated"
	grpc "google.golang.org/grpc"
)

// MockForwarderGrpc is a mock of ForwarderGrpc interface.
type MockForwarderGrpc struct {
	ctrl     *gomock.Controller
	recorder *MockForwarderGrpcMockRecorder
}

// MockForwarderGrpcMockRecorder is the mock recorder for MockForwarderGrpc.
type MockForwarderGrpcMockRecorder struct {
	mock *MockForwarderGrpc
}

// NewMockForwarderGrpc creates a new mock instance.
func NewMockForwarderGrpc(ctrl *gomock.Controller) *MockForwarderGrpc {
	mock := &MockForwarderGrpc{ctrl: ctrl}
	mock.recorder = &MockForwarderGrpcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForwarderGrpc) EXPECT() *MockForwarderGrpcMockRecorder {
	return m.recorder
}

// SendRoomEvent mocks base method.
func (m *MockForwarderGrpc) SendRoomEvent(ctx context.Context, in *eventforwarder.RoomEvent, opts ...grpc.CallOption) (*eventforwarder.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendRoomEvent", varargs...)
	ret0, _ := ret[0].(*eventforwarder.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRoomEvent indicates an expected call of SendRoomEvent.
func (mr *MockForwarderGrpcMockRecorder) SendRoomEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRoomEvent", reflect.TypeOf((*MockForwarderGrpc)(nil).SendRoomEvent), varargs...)
}
