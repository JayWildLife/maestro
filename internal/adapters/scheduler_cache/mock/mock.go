// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/ports/scheduler_cache.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/topfreegames/maestro/internal/core/entities"
)

// MockSchedulerCache is a mock of SchedulerCache interface.
type MockSchedulerCache struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerCacheMockRecorder
}

// MockSchedulerCacheMockRecorder is the mock recorder for MockSchedulerCache.
type MockSchedulerCacheMockRecorder struct {
	mock *MockSchedulerCache
}

// NewMockSchedulerCache creates a new mock instance.
func NewMockSchedulerCache(ctrl *gomock.Controller) *MockSchedulerCache {
	mock := &MockSchedulerCache{ctrl: ctrl}
	mock.recorder = &MockSchedulerCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerCache) EXPECT() *MockSchedulerCacheMockRecorder {
	return m.recorder
}

// GetScheduler mocks base method.
func (m *MockSchedulerCache) GetScheduler(ctx context.Context, name string) (*entities.Scheduler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduler", ctx, name)
	ret0, _ := ret[0].(*entities.Scheduler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduler indicates an expected call of GetScheduler.
func (mr *MockSchedulerCacheMockRecorder) GetScheduler(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduler", reflect.TypeOf((*MockSchedulerCache)(nil).GetScheduler), ctx, name)
}

// SetScheduler mocks base method.
func (m *MockSchedulerCache) SetScheduler(ctx context.Context, scheduler *entities.Scheduler, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetScheduler", ctx, scheduler, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetScheduler indicates an expected call of SetScheduler.
func (mr *MockSchedulerCacheMockRecorder) SetScheduler(ctx, scheduler, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScheduler", reflect.TypeOf((*MockSchedulerCache)(nil).SetScheduler), ctx, scheduler, ttl)
}
