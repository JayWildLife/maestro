// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/topfreegames/maestro/internal/core/ports (interfaces: OperationLeaseStorage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	operation "github.com/topfreegames/maestro/internal/core/entities/operation"
)

// MockOperationLeaseStorage is a mock of OperationLeaseStorage interface.
type MockOperationLeaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOperationLeaseStorageMockRecorder
}

// MockOperationLeaseStorageMockRecorder is the mock recorder for MockOperationLeaseStorage.
type MockOperationLeaseStorageMockRecorder struct {
	mock *MockOperationLeaseStorage
}

// NewMockOperationLeaseStorage creates a new mock instance.
func NewMockOperationLeaseStorage(ctrl *gomock.Controller) *MockOperationLeaseStorage {
	mock := &MockOperationLeaseStorage{ctrl: ctrl}
	mock.recorder = &MockOperationLeaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationLeaseStorage) EXPECT() *MockOperationLeaseStorageMockRecorder {
	return m.recorder
}

// FetchLeaseTTL mocks base method.
func (m *MockOperationLeaseStorage) FetchLeaseTTL(arg0 context.Context, arg1, arg2 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLeaseTTL", arg0, arg1, arg2)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLeaseTTL indicates an expected call of FetchLeaseTTL.
func (mr *MockOperationLeaseStorageMockRecorder) FetchLeaseTTL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLeaseTTL", reflect.TypeOf((*MockOperationLeaseStorage)(nil).FetchLeaseTTL), arg0, arg1, arg2)
}

// GrantLease mocks base method.
func (m *MockOperationLeaseStorage) GrantLease(arg0 context.Context, arg1, arg2 string, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantLease", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantLease indicates an expected call of GrantLease.
func (mr *MockOperationLeaseStorageMockRecorder) GrantLease(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantLease", reflect.TypeOf((*MockOperationLeaseStorage)(nil).GrantLease), arg0, arg1, arg2, arg3)
}

// ListExpiredLeases mocks base method.
func (m *MockOperationLeaseStorage) ListExpiredLeases(arg0 context.Context, arg1 string, arg2 time.Time) ([]operation.OperationLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpiredLeases", arg0, arg1, arg2)
	ret0, _ := ret[0].([]operation.OperationLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpiredLeases indicates an expected call of ListExpiredLeases.
func (mr *MockOperationLeaseStorageMockRecorder) ListExpiredLeases(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpiredLeases", reflect.TypeOf((*MockOperationLeaseStorage)(nil).ListExpiredLeases), arg0, arg1, arg2)
}

// RenewLease mocks base method.
func (m *MockOperationLeaseStorage) RenewLease(arg0 context.Context, arg1, arg2 string, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewLease", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewLease indicates an expected call of RenewLease.
func (mr *MockOperationLeaseStorageMockRecorder) RenewLease(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLease", reflect.TypeOf((*MockOperationLeaseStorage)(nil).RenewLease), arg0, arg1, arg2, arg3)
}

// RevokeLease mocks base method.
func (m *MockOperationLeaseStorage) RevokeLease(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeLease", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeLease indicates an expected call of RevokeLease.
func (mr *MockOperationLeaseStorageMockRecorder) RevokeLease(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeLease", reflect.TypeOf((*MockOperationLeaseStorage)(nil).RevokeLease), arg0, arg1, arg2)
}
