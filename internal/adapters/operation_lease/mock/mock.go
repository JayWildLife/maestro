// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/ports/operation_lease_storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	operation "github.com/topfreegames/maestro/internal/core/entities/operation"
)

// MockOperationLeaseStorage is a mock of OperationLeaseStorage interface.
type MockOperationLeaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOperationLeaseStorageMockRecorder
}

// MockOperationLeaseStorageMockRecorder is the mock recorder for MockOperationLeaseStorage.
type MockOperationLeaseStorageMockRecorder struct {
	mock *MockOperationLeaseStorage
}

// NewMockOperationLeaseStorage creates a new mock instance.
func NewMockOperationLeaseStorage(ctrl *gomock.Controller) *MockOperationLeaseStorage {
	mock := &MockOperationLeaseStorage{ctrl: ctrl}
	mock.recorder = &MockOperationLeaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationLeaseStorage) EXPECT() *MockOperationLeaseStorageMockRecorder {
	return m.recorder
}

// FetchLeaseTTL mocks base method.
func (m *MockOperationLeaseStorage) FetchLeaseTTL(ctx context.Context, schedulerName, operationID string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLeaseTTL", ctx, schedulerName, operationID)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLeaseTTL indicates an expected call of FetchLeaseTTL.
func (mr *MockOperationLeaseStorageMockRecorder) FetchLeaseTTL(ctx, schedulerName, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLeaseTTL", reflect.TypeOf((*MockOperationLeaseStorage)(nil).FetchLeaseTTL), ctx, schedulerName, operationID)
}

// FetchOperationsLease mocks base method.
func (m *MockOperationLeaseStorage) FetchOperationsLease(ctx context.Context, schedulerName string, operationIDs ...string) ([]operation.OperationLease, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, schedulerName}
	for _, a := range operationIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchOperationsLease", varargs...)
	ret0, _ := ret[0].([]operation.OperationLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOperationsLease indicates an expected call of FetchOperationsLease.
func (mr *MockOperationLeaseStorageMockRecorder) FetchOperationsLease(ctx, schedulerName interface{}, operationIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, schedulerName}, operationIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOperationsLease", reflect.TypeOf((*MockOperationLeaseStorage)(nil).FetchOperationsLease), varargs...)
}

// GrantLease mocks base method.
func (m *MockOperationLeaseStorage) GrantLease(ctx context.Context, schedulerName, operationID string, initialTTL time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantLease", ctx, schedulerName, operationID, initialTTL)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantLease indicates an expected call of GrantLease.
func (mr *MockOperationLeaseStorageMockRecorder) GrantLease(ctx, schedulerName, operationID, initialTTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantLease", reflect.TypeOf((*MockOperationLeaseStorage)(nil).GrantLease), ctx, schedulerName, operationID, initialTTL)
}

// ListExpiredLeases mocks base method.
func (m *MockOperationLeaseStorage) ListExpiredLeases(ctx context.Context, schedulerName string, maxLease time.Time) ([]operation.OperationLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpiredLeases", ctx, schedulerName, maxLease)
	ret0, _ := ret[0].([]operation.OperationLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpiredLeases indicates an expected call of ListExpiredLeases.
func (mr *MockOperationLeaseStorageMockRecorder) ListExpiredLeases(ctx, schedulerName, maxLease interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpiredLeases", reflect.TypeOf((*MockOperationLeaseStorage)(nil).ListExpiredLeases), ctx, schedulerName, maxLease)
}

// RenewLease mocks base method.
func (m *MockOperationLeaseStorage) RenewLease(ctx context.Context, schedulerName, operationID string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewLease", ctx, schedulerName, operationID, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewLease indicates an expected call of RenewLease.
func (mr *MockOperationLeaseStorageMockRecorder) RenewLease(ctx, schedulerName, operationID, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLease", reflect.TypeOf((*MockOperationLeaseStorage)(nil).RenewLease), ctx, schedulerName, operationID, ttl)
}

// RevokeLease mocks base method.
func (m *MockOperationLeaseStorage) RevokeLease(ctx context.Context, schedulerName, operationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeLease", ctx, schedulerName, operationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeLease indicates an expected call of RevokeLease.
func (mr *MockOperationLeaseStorageMockRecorder) RevokeLease(ctx, schedulerName, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeLease", reflect.TypeOf((*MockOperationLeaseStorage)(nil).RevokeLease), ctx, schedulerName, operationID)
}
